<?xml version="1.0" encoding="UTF-8"?>
<!--
    XML 声明：定义了 XML 文件的版本和编码格式。
    - version="1.0" 表示使用 XML 1.0 标准。
    - encoding="UTF-8" 表示文件使用 UTF-8 编码，避免中文乱码等问题。
-->

<!--<project> 是 Maven 项目的核心标签，表示这是一个 Maven 项目。-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!--
        modelVersion: 指定当前 Maven 项目模型的版本。
        - 目前 Maven 的标准模型版本是 4.0.0，几乎所有 Maven 项目都使用这个版本。
        - 这个值是固定的，不需要修改。
    -->
    <modelVersion>4.0.0</modelVersion>

<!--    定义继承父工程，这里继承的是 Spring Boot 提供的父工程-->
    <parent>
    <!--所属公司或组织-->
        <groupId>org.springframework.boot</groupId>
    <!--当前模块或项目名称   是 Spring Boot 的父级依赖-->
        <artifactId>spring-boot-starter-parent</artifactId>
    <!--项目的版本-->
        <version>3.4.3</version>
    <!--父项目的相对路径，这里自闭和表示从本地仓库查找这个依赖 本地没有这个依赖将从中央仓库中查找-->
        <relativePath/>
    </parent>

<!--   聚合模块 同时对多个项目进行构建操作-->
    <modules>
        <module>sky-server</module>
        <module>sky-pojo</module>
        <module>sky-common</module>
    </modules>

<!--    当前工程坐标-->
    <groupId>cn.zimeedu</groupId>
    <artifactId>sky-take-out</artifactId>
    <version>1.0-SNAPSHOT</version>
    <!-- 默认打包方式是jar包（将这个工程打包方式设置为pom类型 必须因为不需要被打包成jar）-->
    <packaging>pom</packaging>

<!--    定义全局变量的配置块 自定义属性-->
    <properties>
    <!-- 指定编译源代码时使用的 JDK 版本-->
        <maven.compiler.source>21</maven.compiler.source>
    <!-- 指定生成的字节码文件兼容的目标 JDK 版本-->
        <maven.compiler.target>21</maven.compiler.target>
    <!-- 指定项目的源码文件编码格式-->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!--自定义属性  自定义名字 规范一些 -->
        <lombok.version>1.18.36</lombok.version>
        <jjwt.version>0.9.1</jjwt.version>
        <mybatis.spring.boot.starter.version>3.0.4</mybatis.spring.boot.starter.version>
        <fastjson.version>1.2.76</fastjson.version>
        <commons.lang.version>2.6</commons.lang.version>
<!--        <druid.version>1.2.1</druid.version>-->
        <pagehelper.version>1.4.7</pagehelper.version>
        <aliyun.sdk.oss.version>3.17.4</aliyun.sdk.oss.version>
        <knife4j.version>3.0.2</knife4j.version>
        <aspectj.version>1.9.4</aspectj.version>
        <jaxb-api.version>2.3.1</jaxb-api.version>
        <poi.version>3.16</poi.version>
    </properties>

<!-- 项目的依赖项 直接引入的依赖-->
    <dependencies>

    </dependencies>

<!--    统一管理依赖的版本，不直接引入依赖，而是子工程在引入这个依赖时，不用指定依赖版本-->
    <dependencyManagement>

        <dependencies>
            <!-- Lombok 是一个简化 Java 开发的工具库，通过注解自动生成 getter、setter、构造函数等代码，减少样板代码的编写 -->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <!--定义版本 引用自定义属性 -->
                <version>${lombok.version}</version>
            </dependency>
            <!-- JJWT 是一个用于生成和解析 JSON Web Token (JWT) 的库，常用于身份验证和授权场景 -->
            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt</artifactId>
                <version>${jjwt.version}</version>
            </dependency>
            <!--  是 MyBatis 提供的与 Spring Boot 集成的启动器，简化了 MyBatis 的配置和使用 -->
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${mybatis.spring.boot.starter.version}</version>
            </dependency>
            <!-- FastJSON 是阿里巴巴提供的高性能 JSON 解析和序列化库，用于处理 JSON 数据的转换 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${fastjson.version}</version>
            </dependency>
            <!-- Apache 提供的一个工具库，包含了许多实用的字符串操作、日期处理、异常处理等工具类 -->
            <dependency>
                <groupId>commons-lang</groupId>
                <artifactId>commons-lang</artifactId>
                <version>${commons.lang.version}</version>
            </dependency>
<!--            &lt;!&ndash; Druid 是阿里巴巴提供的数据库连接池组件，支持监控、统计和高性能连接管理 用不了-->
<!--            <dependency>-->
<!--                <groupId>com.alibaba</groupId>-->
<!--                <artifactId>druid-spring-boot-starter</artifactId>-->
<!--                <version>${druid.version}</version>-->
<!--            </dependency>-->
            <!-- PageHelper 是一个分页插件，用于简化 MyBatis 查询中的分页功能 -->
            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper-spring-boot-starter</artifactId>
                <version>${pagehelper.version}</version>
            </dependency>
            <!-- Knife4j 是一个增强版的 Swagger UI 工具，用于生成 API 文档并提供更友好的界面展示 -->
            <dependency>
                <groupId>com.github.xiaoymin</groupId>
                <artifactId>knife4j-spring-boot-starter</artifactId>
                <version>${knife4j.version}</version>
            </dependency>
            <!-- AspectJ Runtime 是 AspectJ 框架的核心运行时库，用于支持 AOP（面向切面编程） -->
            <dependency>
                <groupId>org.aspectj</groupId>
                <artifactId>aspectjrt</artifactId>
                <version>${aspectj.version}</version>
            </dependency>
            <!-- AspectJ Weaver 是 AspectJ 的织入工具，用于在运行时动态织入切面逻辑 -->
            <dependency>
                <groupId>org.aspectj</groupId>
                <artifactId>aspectjweaver</artifactId>
                <version>${aspectj.version}</version>
            </dependency>
            <!-- 阿里云 OSS SDK 用于与阿里云对象存储服务（OSS）交互，支持文件上传、下载、删除等操作 -->
            <dependency>
                <groupId>com.aliyun.oss</groupId>
                <artifactId>aliyun-sdk-oss</artifactId>
                <version>${aliyun.sdk.oss.version}</version>
            </dependency>
            <!-- JAXB API 是 Java 提供的 XML 绑定框架，用于将 Java 对象与 XML 数据相互转换 -->
            <dependency>
                <groupId>javax.xml.bind</groupId>
                <artifactId>jaxb-api</artifactId>
                <version>${jaxb-api.version}</version>
            </dependency>
            <!-- Apache POI 是一个用于操作 Microsoft Office 文件（如 Excel、Word）的库，支持读写 Excel 文件 -->
            <dependency>
                <groupId>org.apache.poi</groupId>
                <artifactId>poi</artifactId>
                <version>${poi.version}</version>
            </dependency>
            <!-- Apache POI OOXML 支持处理基于 Office Open XML 标准的文件格式（如 .xlsx） -->
            <dependency>
                <groupId>org.apache.poi</groupId>
                <artifactId>poi-ooxml</artifactId>
                <version>${poi.version}</version>
            </dependency>
            <!-- 微信支付 SDK，基于 Apache HttpClient 封装，用于与微信支付 API 进行交互，简化支付功能的开发 -->
            <dependency>
                <groupId>com.github.wechatpay-apiv3</groupId>
                <artifactId>wechatpay-apache-httpclient</artifactId>
                <version>0.4.8</version>
            </dependency>

        </dependencies>

    </dependencyManagement>

</project>