<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>cn.zimeedu</groupId>
        <artifactId>sky-take-out</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>sky-server</artifactId>


    <dependencies>

        <dependency>
            <groupId>cn.zimeedu</groupId>
            <artifactId>sky-pojo</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>cn.zimeedu</groupId>
            <artifactId>sky-common</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <!--这是 Spring Boot 的核心启动器，提供了基础的自动配置和日志功能。 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <!--这是一个专门用于测试的启动器，集成了常用的测试框架（如 JUnit、Mockito）-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <!--scope 设置为 test，表示该依赖仅在测试环境中使用，不会被包含到生产环境的构建中。-->
            <scope>test</scope>
        </dependency>

        <!--这是 Spring Boot 的 Web 开发启动器，包含了开发 Web 应用所需的核心组件（如嵌入式 Tomcat 和 Spring MVC）-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <!--scope 默认为 compile，表示该依赖会在编译和运行时都生效。-->
            <scope>compile</scope>
        </dependency>

        <!--这是 MySQL 的 JDBC 驱动程序，用于连接和操作 MySQL 数据库 -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <!--scope 设置为 runtime，表示该依赖仅在运行时需要，编译时不需要直接引用。-->
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
        </dependency>

<!--        <dependency>-->
<!--            <groupId>com.alibaba</groupId>-->
<!--            <artifactId>druid-spring-boot-starter</artifactId>-->
<!--        </dependency>-->

        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
        </dependency>

        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
        </dependency>
<!--         Knife4j 是一个增强版的 Swagger UI 工具  是一个专注于 Swagger 的增强实现 专门针对 Java 项目设计的工具 帮助开发者快速生成美观且功能丰富的 RESTful API 文档-->
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-spring-boot-starter</artifactId>
        </dependency>

        <!--提供了对 Redis 数据库的支持，简化了缓存、消息队列等操作-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <!--提供了基于 Spring Cache 抽象层的缓存支持，支持多种缓存实现-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>

        <!--支持 WebSocket 协议，用于实现实时双向通信-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-websocket</artifactId>
        </dependency>

        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
        </dependency>

        <!--：引入 mockito-core 依赖，用于单元测试中的模拟（Mocking）    Mockito 是一个流行的 Java 测试框架，允许你创建假对象（mock objects），以替代真实对象进行测试。例如，你可以模拟一个服务类的行为，而不需要实际调用数据库或外部 API。-->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>5.7.0</version>
            <scope>test</scope>
        </dependency>
<!--      引入 byte-buddy-agent 依赖，用于动态代理支持  ByteBuddy 是 Mockito 的底层库，用于生成动态代理类（dynamic proxies）。在某些情况下（如内联 Mocks），Mockito 需要通过 Java Agent 来修改 JVM 的字节码行为，因此需要这个依赖。 -->
        <dependency>
            <groupId>net.bytebuddy</groupId>
            <artifactId>byte-buddy-agent</artifactId>
            <version>1.15.11</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

<!--    定义项目的构建过程和相关配置-->
    <build>
        <!--<plugins> 是一个容器，用于声明项目中使用的所有 Maven 插件-->
        <plugins>
            <!--<plugin> 定义了一个具体的插件及其配置-->
            <plugin>
                <!--这是 Spring Boot 提供的一个 Maven 插件，专门用于支持 Spring Boot 项目的构建、打包和运行-->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!-- 配置 Maven Surefire 插件，用于运行单元测试 -->
            <plugin>
                <!-- 插件的 Group ID，表示该插件属于 Apache Maven 官方插件库 -->
                <groupId>org.apache.maven.plugins</groupId>

                <!-- 插件的 Artifact ID，标识这是一个用于运行测试的插件 -->
                <artifactId>maven-surefire-plugin</artifactId>

                <!-- 插件的版本号，确保使用最新稳定版本以获得更好的功能和兼容性 -->
                <version>3.0.0</version>

                <!-- 插件的配置部分 -->
                <configuration>
                    <!-- JVM 参数配置，传递给测试运行时环境 -->
                    <argLine>
                        <!--
                            -javaagent: 加载 ByteBuddy 的 Java Agent，用于支持 Mockito 的动态代理功能。
                            ${settings.localRepository}: Maven 的内置变量，指向本地仓库路径（通常是 ~/.m2/repository）。
                            /net/bytebuddy/byte-buddy-agent/1.15.11/byte-buddy-agent-1.15.11.jar: ByteBuddy Agent 的具体路径。
                            这个参数确保 Mockito 能够正常工作，避免类似以下警告：
                            "WARNING: A Java agent has been loaded dynamically"
                        -->
                        -javaagent:${settings.localRepository}/net/bytebuddy/byte-buddy-agent/1.15.11/byte-buddy-agent-1.15.11.jar

                        <!--
                            -Xshare:off: 禁用 JVM 的共享类功能（Class Data Sharing, CDS）。
                            如果不加这个参数，可能会看到类似以下警告：
                            "Java HotSpot(TM) 64-Bit Server VM warning: Sharing is only supported for boot loader classes"
                            禁用共享类功能可以避免这些警告，同时确保测试环境的稳定性。
                        -->
                        -Xshare:off
                    </argLine>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>
