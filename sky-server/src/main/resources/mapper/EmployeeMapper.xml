<?xml version="1.0" encoding="UTF-8" ?>
<!--头信息 约束 不动-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!--        1. XML映射文件的名称与Mapper接口名称一致，并且将XML映射文件和Mapper接口放置在相同包下（同包同名）-->
<!--        2. XML映射文件的namespace属性为Mapper接口全限定名(包名+类名)一致-->
<mapper namespace="cn.zimeedu.sky.mapper.EmployeeMapper">
    <!--    3. XML映射文件中sql语句的id与Mapper接口中的方法名一致，并保持返回类型一致。-->
    <!--    resultType查询返回的单条记录向哪里封装所以是User(全类名)不是List<User>  指定 SQL 映射语句中参数的类型 -->
    <insert id="save">
        insert into employee
        (name, username, password, phone, sex, id_number, status, create_time, update_time, create_user, update_user) values
            (#{name}, #{username}, #{password}, #{phone}, #{sex}, #{idNumber}, #{status}, #{createTime}, #{updateTime}, #{createUser}, #{updateUser})
    </insert>

    <select id="pageQuery" resultType="Employee">
        select * from employee
        <where> <!--<where>：根据查询条件，来生成where关键字，并会自动去除条件前面多余的and或or。 无判断条件 不产生where  日期类型不能进行！= 会被类型转换成String-->
            <if test="name != null and name != ''">name like concat('%', #{name}, '%')</if>
        </where>
        order by create_time desc
    </select>

<!--    动态SQL，为所有员工更改方法提供更改操作-->
    <update id="update">
        update employee
        <set>  <!--自动生成set关键字，会自动删除更新字段后多余的 ,号-->
            <if test="name != null">name = #{name},</if>
            <if test="username != null">username = #{username},</if>
            <if test="password != null">password = #{password},</if>
            <if test="phone != null">phone = #{phone},</if><if test="sex != null">sex = #{sex},</if>
            <if test="idNumber != null">id_Number = #{idNumber},</if>
            <if test="updateTime != null">update_Time = #{updateTime},</if>
            <if test="updateUser != null">update_User = #{updateUser},</if>
            <if test="status != null">status = #{status},</if>
        </set>
            where id = #{id}
    </update>
</mapper>
